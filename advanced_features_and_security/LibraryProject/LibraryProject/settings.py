"""
Django settings for LibraryProject project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-d#(j)mu4y93yf_=ox$=(ax&x*mei2h2jv-pit6@y&#xo7!7%=x'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False  # Never use True in production

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bookshelf',
    'relationship_app',
    "csp",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "csp.middleware.CSPMiddleware",
]

ROOT_URLCONF = 'LibraryProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LibraryProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


AUTH_USER_MODEL = "bookshelf.CustomUser"

from django.conf import settings

class UserProfile(models.Model):
    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    # ...other fields...

# Security settings
SECURE_BROWSER_XSS_FILTER = True  # Enables the browser's XSS filtering protection
X_FRAME_OPTIONS = "DENY"  # Prevents your site from being rendered in a frame (clickjacking protection)
SECURE_CONTENT_TYPE_NOSNIFF = True  # Prevents the browser from guessing content types
CSRF_COOKIE_SECURE = True  # Ensures CSRF cookies are sent only over HTTPS
SESSION_COOKIE_SECURE = True  # Ensures session cookies are sent only over HTTPS

# --- HTTPS and Security Settings ---

# Redirect all HTTP requests to HTTPS
SECURE_SSL_REDIRECT = True  # Ensures all traffic is redirected to HTTPS

# HTTP Strict Transport Security (HSTS)
SECURE_HSTS_SECONDS = 31536000  # Instructs browsers to use HTTPS for one year
SECURE_HSTS_INCLUDE_SUBDOMAINS = True  # Applies HSTS to all subdomains
SECURE_HSTS_PRELOAD = True  # Allows site to be included in browser preload lists

# Secure cookies
SESSION_COOKIE_SECURE = True  # Session cookies sent only over HTTPS
CSRF_COOKIE_SECURE = True     # CSRF cookies sent only over HTTPS

# Secure headers
X_FRAME_OPTIONS = "DENY"  # Prevents clickjacking by denying framing
SECURE_CONTENT_TYPE_NOSNIFF = True  # Prevents MIME type sniffing
SECURE_BROWSER_XSS_FILTER = True    # Enables browser XSS protection

# If your Django app is behind a proxy/load balancer (e.g., on Azure, AWS, Heroku), 
# this setting ensures Django properly detects HTTPS requests.
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# --- Documentation ---
# These settings enforce HTTPS, secure cookies, and add browser-side protections.
# Ensure your web server (Apache/Nginx) is configured with valid SSL/TLS certificates.
# Example for Nginx:
#   server {
#       listen 443 ssl;
#       server_name yourdomain.com;
#       ssl_certificate /path/to/cert.pem;
#       ssl_certificate_key /path/to/key.pem;
#       ...
#   }
# Review these settings before deploying to production. For local development, you may need to set these to False.
